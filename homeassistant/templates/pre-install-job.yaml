
{{- $retainEnabled := false }}
{{- $addonNames := "" }}
{{- $pvcNames := "" }}
{{- $pvcSize := "" }}
{{- $fullName := include "homeassistant.fullname" . }}
{{- $addonNamespace := include "homeassistant.namespace" . }}
{{- range $addonName, $addonConfig := .Values.addons }}
  {{- if $addonConfig.persistence.retain }}
		{{- $retainEnabled = true }}
    
    {{- if ne $addonNames "" }}
      {{- $addonNames = printf "%s,%s" $addonNames $addonName }}
    {{- else }}
      {{- $addonNames = printf "%s" $addonName }}
    {{- end }}
    
    {{- if ne (len $pvcNames) 0 }}
      {{- $pvcNames = printf "%s,%s-%s-config-pvc" $pvcNames $fullName $addonName }}
    {{- else }}
      {{- $pvcNames = printf "%s-%s-config-pvc" $fullName $addonName }}
    {{- end }}
    
    {{- if ne (len $pvcSize) 0 }}
      {{- $pvcSize = printf "%s,%s" $pvcSize $addonConfig.persistence.config.capacity.storage }}
    {{- else }}
      {{- $pvcSize = printf "%s" $addonConfig.persistence.config.capacity.storage }}
    {{- end }}
  
  {{- end }}
{{- end }}
{{- if $retainEnabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: pv-names-job
  namespace: {{ $addonNamespace }}
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    spec:
      serviceAccountName: {{ $fullName }}
      containers:
        - name: pv-names-container
          image: bitnami/kubectl:1.25.12
          command: ["/bin/sh", "-c"]
          args:
            - |
              echo $SIZE
              # Loop through each PVC name
              for i in $(seq 1 $(echo $ADDON_PVC_NAMES | tr ',' ' ' | wc -w)); do
                pvc_name=$(echo $ADDON_PVC_NAMES | cut -d',' -f$i)
                size=$(echo $PVC_SIZES | cut -d',' -f$i)
                app="$NAME-$(echo $ADDON_NAMES | cut -d',' -f$i)"

                # Check if the PVC already exists
                if kubectl get pvc $pvc_name --namespace=$NAMESPACE &> /dev/null; then
                  # Get the PVC status
                  pvc_status=$(kubectl get pvc $pvc_name --namespace=$NAMESPACE -o jsonpath='{.status.phase}')

                  # If the PVC is already bound, skip creating a new one
                  if [ "$pvc_status" = "Bound" ]; then
                    echo "PVC $pvc_name already exists and is bound. Skipping PVC creation."
                  else
                    # PVC exists but not bound, recreate it using corresponding PV
                    pv_name=$(kubectl get pv -n $NAMESPACE -o jsonpath='{.items[?(@.spec.claimRef.name=="'$pvc_name'")].metadata.name}')
                    kubectl patch pv $pv_name --type json -p '[{"op": "remove", "path": "/spec/claimRef"}]'
                    kubectl delete pvc $pvc_name --namespace=$NAMESPACE --ignore-not-found=true
                    kubectl apply -f - <<-EOF
                      apiVersion: v1
                      kind: PersistentVolumeClaim
                      metadata:
                        name: $pvc_name
                        namespace: $NAMESPACE
                        labels:
                          app: $app
                      spec:
                        storageClassName: retain-local-path
                        volumeName: $pv_name
                        accessModes:
                          - ReadWriteOnce
                        resources:
                          requests:
                            storage: $size
              EOF
                  fi
                else
                  # PVC doesn't exist, create it using corresponding PV
                  pv_name=$(kubectl get pv -n $NAMESPACE -o jsonpath='{.items[?(@.spec.claimRef.name=="'$pvc_name'")].metadata.name}')
                  kubectl apply -f - <<-EOF
                    apiVersion: v1
                    kind: PersistentVolumeClaim
                    metadata:
                      name: $pvc_name
                      namespace: $NAMESPACE
                      labels:
                        app: $app
                    spec:
                      storageClassName: retain-local-path
                      volumeName: $pv_name
                      accessModes:
                        - ReadWriteOnce
                      resources:
                        requests:
                          storage: $size
              EOF
                fi
              done

              # Intentionally fail the pod to stop the Job
              exit 1


          volumeMounts:
            - name: shared-data
              mountPath: /tmp
          env:
            - name: NAMESPACE
              value: "{{ $addonNamespace }}"
            - name: ADDON_NAMES
              value: {{ $addonNames }}
            - name: ADDON_PVC_NAMES
              value: {{ $pvcNames }}
            - name: PVC_SIZES
              value: {{ $pvcSize }}
            - name: NAME
              value: {{ $fullName }}
      volumes:
        - name: shared-data
          emptyDir: {}
      restartPolicy: Never
  backoffLimit: 1
#  ttlSecondsAfterFinished: 1
{{- end }}
